// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const CONFIG = {
    MODEL_PATH: "./scene.glb", // –§–∞–π–ª –º–æ–¥–µ–ª–∏
    TEXTURE_PATH: "./grass.jpg" // –¢–µ–∫—Å—Ç—É—Ä–∞ —Ç—Ä–∞–≤—ã
};
document.addEventListener("DOMContentLoaded", function() {
    const canvas = document.getElementById("renderCanvas");
    const loadingElement = document.getElementById("loading");
    const vrButton = document.getElementById("vrButton");

    // –°–æ–∑–¥–∞–µ–º –¥–≤–∏–∂–æ–∫
    const engine = new BABYLON.Engine(canvas, true);

    // –ù–ï —Å–æ–∑–¥–∞–µ–º —Å—Ü–µ–Ω—É –∑–∞—Ä–∞–Ω–µ–µ - –æ–Ω–∞ —Å–æ–∑–¥–∞—Å—Ç—Å—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–æ–¥–µ–ª–∏
    let scene;
    let camera;
    let light;
    let groundMesh;
    let xrButton;

    // –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å –∏—Å–ø–æ–ª—å–∑—É—è LOAD
    loadingElement.textContent = "–ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å...";

    BABYLON.SceneLoader.Load("./", CONFIG.MODEL_PATH, engine,
        function (newScene) {
            console.log("‚úÖ –ú–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞ —á–µ—Ä–µ–∑ Load!");
            console.log("üì¶ –í—Å–µ–≥–æ –º–µ—à–µ–π –≤ —Å—Ü–µ–Ω–µ:", newScene.meshes.length);

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ —Å—Ü–µ–Ω—É
            scene = newScene;

            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –º–µ—à–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            scene.meshes.forEach((mesh, i) => {
                console.log(`üìê ${i}: ${mesh.name} - –ø–æ–∑–∏—Ü–∏—è: ${mesh.position.toString()}`);
            });

            // –¢–µ–ø–µ—Ä—å —Å–æ–∑–¥–∞–µ–º –∫–∞–º–µ—Ä—É, —Å–≤–µ—Ç –∏ –ø–æ–ª –≤ –ó–ê–ì–†–£–ñ–ï–ù–ù–û–ô —Å—Ü–µ–Ω–µ
            setupSceneAfterLoad();



            loadingElement.textContent = `‚úÖ –ú–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞! –û–±—ä–µ–∫—Ç–æ–≤: ${scene.meshes.length}`;

            // –í–∫–ª—é—á–∞–µ–º VR –∫–Ω–æ–ø–∫—É
            vrButton.style.display = "block";
            vrButton.textContent = "–í–æ–π—Ç–∏ –≤ VR";
        },
        function (progress) {
            const percent = ((progress.loaded / progress.total) * 100).toFixed(0);
            loadingElement.textContent = `–ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏... ${percent}%`;
        },
        function (error) {
            console.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏:", error);
            loadingElement.textContent = "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏: " + error.message;
            loadingElement.style.color = "red";
        }
    );

    // –§—É–Ω–∫—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—Ü–µ–Ω—ã –ü–û–°–õ–ï –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏
    function setupSceneAfterLoad() {
        // –ö–∞–º–µ—Ä–∞ - UniversalCamera
        camera = new BABYLON.UniversalCamera("camera", new BABYLON.Vector3(0, 1.6, -5), scene);
        camera.attachControl(canvas, true);
        camera.speed = 0.3;
        camera.angularSensibility = 2000;
        camera.minZ = 0.1;

        // –°–≤–µ—Ç
        light = new BABYLON.HemisphericLight("light", new BABYLON.Vector3(0, 1, 0), scene);
        light.intensity = 0.7;

        // –ü–æ–ª (–¥–ª—è VR —Ç–µ–ª–µ–ø–æ—Ä—Ç–∞—Ü–∏–∏)
        const existingMesh = scene.getMeshByName("Cylinder.007")
        console.log(existingMesh.name)
        existingMesh.position.y = 0;
        existingMesh.scaling.x = 2.0;
        existingMesh.scaling.z = 2.0;
        existingMesh.isPickable = true;
        existingMesh.checkCollisions = true;
        existingMesh.refreshBoundingInfo();

        groundMesh = existingMesh

        const waterMaterial = new BABYLON.StandardMaterial("grassMat", scene)
        const waterTexture = new BABYLON.Texture(CONFIG.TEXTURE_PATH, scene); // —Ç–µ–∫—Å—Ç—É—Ä–∞ –≤–æ–¥—ã
        waterTexture.uScale = 10.0; // –ú–∞—Å—à—Ç–∞–± —Ç–µ–∫—Å—Ç—É—Ä—ã
        waterTexture.vScale = 10.0;
        waterMaterial.diffuseTexture = waterTexture;



        groundMesh.material = waterMaterial;
        groundMesh.name = "grass";


        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–∞–º–µ—Ä—É –Ω–∞ –º–æ–¥–µ–ª—å
        setupCameraForModel();

        // –ó–∞–ø—É—Å–∫–∞–µ–º —Ä–µ–Ω–¥–µ—Ä
        engine.runRenderLoop(function() {
            scene.render();
        });

        window.addEventListener("resize", function() {
            engine.resize();
        });
    }

    // –§—É–Ω–∫—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞–º–µ—Ä—ã –¥–ª—è –º–æ–¥–µ–ª–∏
    function setupCameraForModel() {
        const meshes = scene.meshes;
        if (meshes.length === 0) return;

        try {
            // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –ø–æ–ª –∏ —Å–ª—É–∂–µ–±–Ω—ã–µ –º–µ—à–∏
            const modelMeshes = meshes.filter(mesh =>
                mesh.name !== "grass" &&
                !mesh.name.includes("teleportation") &&
                !mesh.name.includes("rotationCone") &&
                mesh.getBoundingInfo
            );

            if (modelMeshes.length === 0) {
                console.warn("‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–æ –º–µ—à–µ–π –º–æ–¥–µ–ª–∏ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞–º–µ—Ä—ã");
                return;
            }

            console.log("üéØ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–∞–º–µ—Ä—ã –¥–ª—è –º–µ—à–µ–π:", modelMeshes.length);

            // –í—ã—á–∏—Å–ª—è–µ–º –æ–±—â–∏–π bounding box
            let min = new BABYLON.Vector3(Infinity, Infinity, Infinity);
            let max = new BABYLON.Vector3(-Infinity, -Infinity, -Infinity);

            for (const mesh of modelMeshes) {
                const bbox = mesh.getBoundingInfo().boundingBox;
                min = BABYLON.Vector3.Minimize(min, bbox.minimumWorld);
                max = BABYLON.Vector3.Maximize(max, bbox.maximumWorld);
            }

            const center = min.add(max).scale(0.5);
            const size = max.subtract(min).scale(0.5);

            console.log("üìç –¶–µ–Ω—Ç—Ä –º–æ–¥–µ–ª–∏:", center.toString());
            console.log("üìè –†–∞–∑–º–µ—Ä –º–æ–¥–µ–ª–∏:", size.toString());

            // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–∞–º–µ—Ä—É
            const modelSize = size.length();
            const cameraDistance = Math.max(modelSize * 1.5, 5);

            camera.position = new BABYLON.Vector3(
                center.x,
                center.y,
                center.z - cameraDistance
            );
            camera.setTarget(center);

            console.log("üì∑ –ö–∞–º–µ—Ä–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞");
            console.log("üìç –ü–æ–∑–∏—Ü–∏—è –∫–∞–º–µ—Ä—ã:", camera.position.toString());

        } catch (error) {
            console.warn("‚ö†Ô∏è –ê–≤—Ç–æ–Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–∞–º–µ—Ä—ã –Ω–µ —É–¥–∞–ª–∞—Å—å:", error);
            // –†–µ–∑–µ—Ä–≤–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞
            camera.position = new BABYLON.Vector3(0, 10, -10);
            camera.setTarget(BABYLON.Vector3.Zero());
        }
    }

    // VR —Ñ—É–Ω–∫—Ü–∏—è
    vrButton.addEventListener("click", async function() {
        if (!scene) {
            loadingElement.textContent = "‚ùå –î–æ–∂–¥–∏—Ç–µ—Å—å –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏";
            loadingElement.style.color = "red";
            return;
        }

        try {
            loadingElement.textContent = "–ó–∞–ø—É—Å–∫–∞–µ–º VR...";
            loadingElement.style.display = "block";
            vrButton.disabled = true;



            // –°–æ–∑–¥–∞–µ–º VR –æ–ø—ã—Ç
            const xrHelper = await scene.createDefaultXRExperienceAsync({
                floorMeshes: [groundMesh],
                disableTeleportation: false,
                teleportationFloorMeshes: [groundMesh]
            });


            // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ç–µ–ª–µ–ø–æ—Ä—Ç–∞—Ü–∏—é
            if (xrHelper.teleportation) {
                xrHelper.teleportation.addFloorMesh(groundMesh);
                console.log("üìç –¢–µ–ª–µ–ø–æ—Ä—Ç–∞—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞");
            }

            //setupVRCameraHeight();
            loadingElement.style.display = "none";
            vrButton.textContent = "VR –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω";
            xrButton = document.getElementsByClassName("babylonVRicon")

        } catch (error) {
            console.error("‚ùå –û—à–∏–±–∫–∞ VR:", error);
            loadingElement.textContent = "–û—à–∏–±–∫–∞ VR: " + error.message;
            loadingElement.style.color = "red";
            vrButton.disabled = false;
        }
    });



    xrButton.addEventListener("click", async function ()  {
        checkVRState();

    });
    function setupVRCameraHeight() {
        // –í VR –∫–∞–º–µ—Ä–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –Ω–∞ —É—Ä–æ–≤–µ–Ω—å –ø–æ–ª–∞
        // –ù–æ –º–æ–∂–Ω–æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å:

        // 1. –£–±–µ–¥–∏–º—Å—è —á—Ç–æ ground –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –≤—ã—Å–æ—Ç–µ
        groundMesh.position.y = 0;

        // 2. –ù–∞—Å—Ç—Ä–æ–∏–º offset –µ—Å–ª–∏ –Ω—É–∂–Ω–æ (—Ä–µ–¥–∫–æ —Ç—Ä–µ–±—É–µ—Ç—Å—è)
        if (scene.activeCamera && scene.activeCamera.position) {
            console.log("üìè –í—ã—Å–æ—Ç–∞ –∫–∞–º–µ—Ä—ã –≤ VR:", scene.activeCamera.position.y);
        }


    }
    // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ VR –∏ —Ç–µ–ª–µ–ø–æ—Ä—Ç–∞—Ü–∏–∏
    function checkVRState() {
        if (!scene.xr) {
            console.log("‚ùå XR –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω");
            return;
        }

        const xr = scene.xr;
        console.log("üéÆ XR —Å–æ—Å—Ç–æ—è–Ω–∏–µ:", xr.baseExperience.state);
        console.log("üìç –¢–µ–ª–µ–ø–æ—Ä—Ç–∞—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞:", !!xr.teleportation);

        if (xr.teleportation) {
            console.log("üéØ Floor meshes:", xr.teleportation._floorMeshes);
            console.log("üîß Teleportation enabled:", xr.teleportation.teleportationEnabled);
        }

        console.log("üìè –í—ã—Å–æ—Ç–∞ –∫–∞–º–µ—Ä—ã:", scene.activeCamera.position.y);
    }
    window.checkVRState = checkVRState;
    console.log("üöÄ –û–∂–∏–¥–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –º–æ–¥–µ–ª–∏...");
});
